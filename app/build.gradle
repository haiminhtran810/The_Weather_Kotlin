apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

androidExtensions {
  experimental = true
}

android {

  compileSdkVersion rootProject.ext.compileSdkVersion
  flavorDimensions "default"
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    multiDexEnabled true
    applicationId "home.learn.hmt.the_weather_kotlin"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  productFlavors {
    dev {
      versionCode rootProject.ext.versionCode_dev
      versionName rootProject.ext.versionName_dev
      applicationIdSuffix = ".dev"
    }
    stg {
      versionCode rootProject.ext.versionCode_dev
      versionName rootProject.ext.versionName_dev
      applicationIdSuffix = ".stg"
    }
    pro {
      versionCode rootProject.ext.versionCode_product
      versionName rootProject.ext.versionName_product
      applicationIdSuffix = ".pro"
    }
  }

  dataBinding {
    enabled = true
  }

  productFlavors.all {}

  applicationVariants.all { variant ->
    def BASE_URL
    def WEATHER_API_KEY
    if (variant.getName().contains("dev")) {
      BASE_URL = "http://api.openweathermap.org/"
    } else if (variant.getName().contains("stg")) {
      BASE_URL = "http://api.openweathermap.org/"
    } else if (variant.getName().contains("pro")) {
      BASE_URL = "http://api.openweathermap.org/"
    }

    WEATHER_API_KEY = '"' + key_open_weather_api + '"' ?: '"Define your key"'

    variant.buildConfigField "String", "BASE_URL", "\"${BASE_URL}\""
    variant.buildConfigField "String", "WEATHER_API_KEY", WEATHER_API_KEY
  }
}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation 'com.android.support:appcompat-v7:27.1.1'
  implementation "com.android.support:support-v4:27.1.1"
  implementation 'com.android.support.constraint:constraint-layout:1.1.0'
  implementation "com.android.support:recyclerview-v7:27.1.1"
  implementation "com.android.support:cardview-v7:27.1.1"
  implementation "com.android.support:design:27.1.1"

  testImplementation 'junit:junit:4.12'
  androidTestImplementation 'com.android.support.test:runner:1.0.2'
  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

  //Support ReactiveX android
  implementation 'io.reactivex.rxjava2:rxjava:2.1.8'
  implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
  //RxJava
  //
  kapt 'com.android.databinding:compiler:3.0.1'
  implementation "android.arch.lifecycle:extensions:1.1.0"
  // Dagger 2

  //Using this for parse json data to object
  implementation "com.google.code.gson:gson:2.8.2"

  //Using retrofit library for connect api v4.data.source.remote.service
  implementation "com.squareup.retrofit2:retrofit:2.3.0"
  implementation "com.squareup.retrofit2:converter-gson:2.3.0"
  implementation "com.squareup.okhttp3:logging-interceptor:3.9.1"
  implementation "com.squareup.retrofit2:adapter-rxjava2:2.3.0"
  implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-experimental-adapter:1.0.0'

  //Room

  // AHbottomnavigation
  implementation 'com.aurelhubert:ahbottomnavigation:2.1.0'

  //dagger 2 core
  implementation "com.google.dagger:dagger:2.13"
  kapt "com.google.dagger:dagger-compiler:2.13"
  compileOnly 'javax.annotation:jsr250-api:1.0'
  implementation 'javax.inject:javax.inject:1'


}
